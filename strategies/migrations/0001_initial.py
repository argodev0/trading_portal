# Generated by Django 4.2.23 on 2025-06-28 00:42

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GeneratedStrategy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the generated strategy', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Human-readable name for the strategy', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of what the strategy does')),
                ('original_prompt', models.TextField(help_text='Original user prompt used to generate the strategy', validators=[django.core.validators.MinLengthValidator(10)])),
                ('generated_code', models.TextField(help_text='AI-generated Python code for the strategy')),
                ('strategy_type', models.CharField(choices=[('trend_following', 'Trend Following'), ('mean_reversion', 'Mean Reversion'), ('momentum', 'Momentum'), ('arbitrage', 'Arbitrage'), ('grid_trading', 'Grid Trading'), ('scalping', 'Scalping'), ('swing_trading', 'Swing Trading'), ('custom', 'Custom')], default='custom', help_text='Type/category of trading strategy', max_length=50)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('validated', 'Validated'), ('active', 'Active'), ('archived', 'Archived'), ('error', 'Error')], default='draft', help_text='Current status of the strategy', max_length=20)),
                ('validation_results', models.JSONField(blank=True, help_text='Results from code validation checks', null=True)),
                ('parameters', models.JSONField(blank=True, default=dict, help_text='Strategy parameters and configuration')),
                ('performance_metrics', models.JSONField(blank=True, default=dict, help_text='Performance metrics from backtesting or live trading')),
                ('ai_model_version', models.CharField(default='gemini-1.5-pro', help_text='Version of AI model used for generation', max_length=50)),
                ('generation_metadata', models.JSONField(blank=True, default=dict, help_text='Metadata about the generation process')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the strategy was first generated')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the strategy was last modified')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this strategy can be shared with other users')),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of times this strategy has been used')),
                ('user', models.ForeignKey(help_text='User who generated this strategy', on_delete=django.db.models.deletion.CASCADE, related_name='generated_strategies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Generated Strategy',
                'verbose_name_plural': 'Generated Strategies',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StrategyGenerationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prompt', models.TextField(help_text='Original prompt used for generation')),
                ('status', models.CharField(choices=[('success', 'Success'), ('failure', 'Failure'), ('partial', 'Partial Success')], help_text='Status of the generation attempt', max_length=20)),
                ('ai_response_raw', models.TextField(blank=True, help_text='Raw response from AI model')),
                ('extracted_code', models.TextField(blank=True, help_text='Code extracted from AI response')),
                ('error_message', models.TextField(blank=True, help_text='Error message if generation failed')),
                ('processing_time_seconds', models.FloatField(blank=True, help_text='Time taken to generate the strategy', null=True)),
                ('ai_model_used', models.CharField(default='gemini-1.5-pro', help_text='AI model used for generation', max_length=50)),
                ('tokens_used', models.PositiveIntegerField(blank=True, help_text='Number of tokens consumed in generation', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('strategy', models.ForeignKey(blank=True, help_text='Associated strategy if generation was successful', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='generation_logs', to='strategies.generatedstrategy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strategy_generation_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Strategy Generation Log',
                'verbose_name_plural': 'Strategy Generation Logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='strategies__user_id_2405da_idx'), models.Index(fields=['status', '-created_at'], name='strategies__status_f3bcd0_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='generatedstrategy',
            index=models.Index(fields=['user', '-created_at'], name='strategies__user_id_aa9cad_idx'),
        ),
        migrations.AddIndex(
            model_name='generatedstrategy',
            index=models.Index(fields=['status', '-created_at'], name='strategies__status_ed9ee6_idx'),
        ),
        migrations.AddIndex(
            model_name='generatedstrategy',
            index=models.Index(fields=['strategy_type', '-created_at'], name='strategies__strateg_f69ff9_idx'),
        ),
        migrations.AddIndex(
            model_name='generatedstrategy',
            index=models.Index(fields=['is_public', '-created_at'], name='strategies__is_publ_fdf318_idx'),
        ),
    ]
